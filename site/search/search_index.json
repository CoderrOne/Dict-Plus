{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello Dict+ Dict+ is a useful solution to all your dictionary needs! You have access to .Changed on shallow and deep tables. Functions to find and add just like table. This is a powerful module that allows you to save massive lines of code. It is very lightweight and will not tax on your game. With this non-intrusive module that adds nothing more to your game this will re-define the way your work. Installation You must download the .rbxm file on the github realeses page. Then insert it into a Service like ReplicatedStorage or Server Storage.","title":"Hello Dict+"},{"location":"#hello-dict","text":"Dict+ is a useful solution to all your dictionary needs! You have access to .Changed on shallow and deep tables. Functions to find and add just like table. This is a powerful module that allows you to save massive lines of code. It is very lightweight and will not tax on your game. With this non-intrusive module that adds nothing more to your game this will re-define the way your work.","title":"Hello Dict+"},{"location":"#installation","text":"You must download the .rbxm file on the github realeses page. Then insert it into a Service like ReplicatedStorage or Server Storage.","title":"Installation"},{"location":"about/","text":"Methods .find module.find([Dict], String) Will find the String name in the Dictionary Provided. If failed it will return nil. .remove module.remove([Dict], String) This will remove any reference of the Key in the Dictionary you provide. Any references to this value will be nil. .encode module.encode([Dict]) This will return the encoded version of your Dictionary. If it fails it will return nil. .decode module.decode([Dict]) This will return the decoded version of your Dictionary. If it fails it will return nil. .getn module.getn([Dict]) This will return the sum amount of Key's in your Dictionary. If it fails it will return nil. .changed module.changed([Dict]):Connect(function(Key, NewValue) This has to be connected to as it is an event the Key and NewValue Argument's are returned The Key Parameter is the key that has been changed and the NewValue is the new value of the Key. If it fails it will return nil. If it fails it will return nil. .unpack module.unpack([Dict]) A dictionary used with this will return with pairs of Key, Value. This will be in table form. If it fails it will return nil. Potential Errors This may error if you do not give the function you use the proper Parameters it needs. It will print out the error and return nil in your part of the function you use it in as it will not stop your code. Any future common errors and answers will be solved here. Limitations This may only work with Dictionaries as it cannot and will fail with normal arrays. This has been specifically designed to work with dictionaries as there are array equivalent's in Luau and Lua.","title":"About"},{"location":"about/#methods","text":"","title":"Methods"},{"location":"about/#find","text":"module.find([Dict], String) Will find the String name in the Dictionary Provided. If failed it will return nil.","title":".find"},{"location":"about/#remove","text":"module.remove([Dict], String) This will remove any reference of the Key in the Dictionary you provide. Any references to this value will be nil.","title":".remove"},{"location":"about/#encode","text":"module.encode([Dict]) This will return the encoded version of your Dictionary. If it fails it will return nil.","title":".encode"},{"location":"about/#decode","text":"module.decode([Dict]) This will return the decoded version of your Dictionary. If it fails it will return nil.","title":".decode"},{"location":"about/#getn","text":"module.getn([Dict]) This will return the sum amount of Key's in your Dictionary. If it fails it will return nil.","title":".getn"},{"location":"about/#changed","text":"module.changed([Dict]):Connect(function(Key, NewValue) This has to be connected to as it is an event the Key and NewValue Argument's are returned The Key Parameter is the key that has been changed and the NewValue is the new value of the Key. If it fails it will return nil. If it fails it will return nil.","title":".changed"},{"location":"about/#unpack","text":"module.unpack([Dict]) A dictionary used with this will return with pairs of Key, Value. This will be in table form. If it fails it will return nil.","title":".unpack"},{"location":"about/#potential-errors","text":"This may error if you do not give the function you use the proper Parameters it needs. It will print out the error and return nil in your part of the function you use it in as it will not stop your code. Any future common errors and answers will be solved here.","title":"Potential Errors"},{"location":"about/#limitations","text":"This may only work with Dictionaries as it cannot and will fail with normal arrays. This has been specifically designed to work with dictionaries as there are array equivalent's in Luau and Lua.","title":"Limitations"}]}