{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Dict Plus Dict Plus is a useful solution for handling dictionaries of any size; The freedom to access if the dictionary. Resulting in saving you massive amounts of code. All written carefully to avoid any nasty scenarios. This powerful, non-intrusive module that re-defines the way you work with your dictionaries. Installation To install simply head over to the github repository release page and download the latest .rbxm file. Or if you just want to look around the code you may find it under Dict Plus Files","title":"Home"},{"location":"#welcome-to-dict-plus","text":"Dict Plus is a useful solution for handling dictionaries of any size; The freedom to access if the dictionary. Resulting in saving you massive amounts of code. All written carefully to avoid any nasty scenarios. This powerful, non-intrusive module that re-defines the way you work with your dictionaries.","title":"Welcome to Dict Plus"},{"location":"#installation","text":"To install simply head over to the github repository release page and download the latest .rbxm file. Or if you just want to look around the code you may find it under Dict Plus Files","title":"Installation"},{"location":"functions/","text":"How to use First Steps First off; you must require the module. In all the examples the module will be refered to DictPlus . You must create a variable for the module by requiring the module. The dictionary we will use will be: local DictPlus = require(game.ServerStorage.MainModule) local MyDictionary = { ['Foo'] = { Bar = {}, Baz = false }, ['Baz'] = { Hi = 'lol' } } If you see MyDictionary , It is refering to this orginal dictionary. Functions DictPlus.getn() DictPlus.getn(MyDictionary ['Dictionary']) Argument(s): Argument #1 A dictionary If the Argument #1 is not a dictionary it will fail. Return(s) Return #1 Integer In this case this function will return 2 DictPlus.changed() DictPlus.changed(MyDictionary ['Dictionary']):Connect(function(Key, Value) Argument(s): Argument #1 A dictionary If the Argument #1 is not a dictionary it will fail. Connection Argument(s) Argument #1: The key that has been changed Argument #2: The new value the key has been changed to Return(s) Will return a RBXScriptSignal which must be connected to; the two arguments when connected to the event is the Key and the NewValue . Failure to connect to the event will cause an error.","title":"How to use"},{"location":"functions/#how-to-use","text":"","title":"How to use"},{"location":"functions/#first-steps","text":"First off; you must require the module. In all the examples the module will be refered to DictPlus . You must create a variable for the module by requiring the module. The dictionary we will use will be: local DictPlus = require(game.ServerStorage.MainModule) local MyDictionary = { ['Foo'] = { Bar = {}, Baz = false }, ['Baz'] = { Hi = 'lol' } } If you see MyDictionary , It is refering to this orginal dictionary.","title":"First Steps"},{"location":"functions/#functions","text":"","title":"Functions"},{"location":"functions/#dictplusgetn","text":"DictPlus.getn(MyDictionary ['Dictionary'])","title":"DictPlus.getn()"},{"location":"functions/#arguments","text":"Argument #1 A dictionary If the Argument #1 is not a dictionary it will fail.","title":"Argument(s):"},{"location":"functions/#returns","text":"Return #1 Integer In this case this function will return 2","title":"Return(s)"},{"location":"functions/#dictpluschanged","text":"DictPlus.changed(MyDictionary ['Dictionary']):Connect(function(Key, Value)","title":"DictPlus.changed()"},{"location":"functions/#arguments_1","text":"Argument #1 A dictionary If the Argument #1 is not a dictionary it will fail.","title":"Argument(s):"},{"location":"functions/#connection-arguments","text":"Argument #1: The key that has been changed Argument #2: The new value the key has been changed to","title":"Connection Argument(s)"},{"location":"functions/#returns_1","text":"Will return a RBXScriptSignal which must be connected to; the two arguments when connected to the event is the Key and the NewValue . Failure to connect to the event will cause an error.","title":"Return(s)"}]}