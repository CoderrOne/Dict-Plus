{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Dict Plus A efficient, non-intrusive module carefully designed to handle dictionaries. Simple to use and simple to learn, easy to adapt. This module is a work in progress. Many problems could occur, in event there are issues you can open an issue on Github. Prerequisites This documentation assumes some familiarity with Lua. If you're new to Lua, use this site . Why Dict Plus? Dict Plus is useful in a variety of situations. The ability to manipulate dictionaries as you like. A multitude of features and functions that are appropriate for your dispersal.","title":"Home"},{"location":"#welcome-to-dict-plus","text":"A efficient, non-intrusive module carefully designed to handle dictionaries. Simple to use and simple to learn, easy to adapt. This module is a work in progress. Many problems could occur, in event there are issues you can open an issue on Github. Prerequisites This documentation assumes some familiarity with Lua. If you're new to Lua, use this site .","title":"Welcome to Dict Plus"},{"location":"#why-dict-plus","text":"Dict Plus is useful in a variety of situations. The ability to manipulate dictionaries as you like. A multitude of features and functions that are appropriate for your dispersal.","title":"Why Dict Plus?"},{"location":"api/","text":"API Reminder Make sure to type the method correctly and give it the correct arguments it needs, otherwise it will fail! Changed DictPlus.changed() Creates a listener for when the dictionary given changes. Parameters DictPlus . changed ( Dictionary ): Connect ( function ( Key , NewValue ) : RBXScriptSignal end ) Key: The Key that has been modified - If deleted the NewValue will be nil NewValue: As the name suggests it is the new value of the Key Connection Arguments Dictionary: A key, value dictionary Caution This method returns an RBXScriptSignal . If not connected to - it will fail Getn DictPlus.getn() Returns a numerical value of the amount of keys in the dictionary provided. Parameters print ( DictPlus . getn ( Dictionary )) : Integer Dictionary: A key, value dictionary Beta Methods Caution Such methods are not expected to work. They are currently in the process of testing / making. Until it is ready to be used, they remain here for usage and assessment. Add DictPlus.add() local DictionaryOne = { [ \"Gold Bars\" ] = 4 , [ \"Healing Potions\" ] = 1 , [ \"Cups of Coffee\" ] = 3000 } local DictionaryTwo = { [ \"fireOrb\" ] = true , [ \"waterOrb\" ] = false , [ \"windOrb\" ] = true } DictPlus . add ( DictionaryOne , DictionaryTwo ) Parameters 1 Dictionary: A key, value dictionary 2 Dictionary: A key, value dictionary","title":"API"},{"location":"api/#api","text":"Reminder Make sure to type the method correctly and give it the correct arguments it needs, otherwise it will fail!","title":"API"},{"location":"api/#changed-dictpluschanged","text":"Creates a listener for when the dictionary given changes.","title":"Changed DictPlus.changed()"},{"location":"api/#parameters","text":"DictPlus . changed ( Dictionary ): Connect ( function ( Key , NewValue ) : RBXScriptSignal end ) Key: The Key that has been modified - If deleted the NewValue will be nil NewValue: As the name suggests it is the new value of the Key","title":"Parameters"},{"location":"api/#connection-arguments","text":"Dictionary: A key, value dictionary Caution This method returns an RBXScriptSignal . If not connected to - it will fail","title":"Connection Arguments"},{"location":"api/#getn-dictplusgetn","text":"Returns a numerical value of the amount of keys in the dictionary provided.","title":"Getn DictPlus.getn()"},{"location":"api/#parameters_1","text":"print ( DictPlus . getn ( Dictionary )) : Integer Dictionary: A key, value dictionary","title":"Parameters"},{"location":"api/#beta-methods","text":"Caution Such methods are not expected to work. They are currently in the process of testing / making. Until it is ready to be used, they remain here for usage and assessment.","title":"Beta Methods"},{"location":"api/#add-dictplusadd","text":"local DictionaryOne = { [ \"Gold Bars\" ] = 4 , [ \"Healing Potions\" ] = 1 , [ \"Cups of Coffee\" ] = 3000 } local DictionaryTwo = { [ \"fireOrb\" ] = true , [ \"waterOrb\" ] = false , [ \"windOrb\" ] = true } DictPlus . add ( DictionaryOne , DictionaryTwo )","title":"Add DictPlus.add()"},{"location":"api/#parameters_2","text":"1 Dictionary: A key, value dictionary 2 Dictionary: A key, value dictionary","title":"Parameters"},{"location":"install/","text":"Installation Method 1 Go to the Go to the Github releases page Download the Dict Plus.rbxm file Place the .rbxm file somewhere, for example ReplicatedStorage . For our examples will be putting the module in ServerStorage. Method 2 Click the button below to download the module. Download Module You're now all set!","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#method-1","text":"Go to the Go to the Github releases page Download the Dict Plus.rbxm file Place the .rbxm file somewhere, for example ReplicatedStorage . For our examples will be putting the module in ServerStorage.","title":"Method 1"},{"location":"install/#method-2","text":"Click the button below to download the module. Download Module You're now all set!","title":"Method 2"},{"location":"start/","text":"To get started You have chosen to use Dict Plus. Now what? You must require . Requiring basically enables the module for use. Allowing you to use its methods . First off you must install the module from this page . After you have aquired your .rbxm file you can now use it! Place the .rbxm file in a sutibale service in your game. Recommended services include: * ReplicatedStorage * ServerStorage Essentially you want to place it in a place that is accessible by both client and server for ease of use. When you have the module in your game. You can do this to require / enable it. local DictPlus = require ( game . ServerScriptService . MainModule ) -- Great! You now have access to the module and its methods! Danger You might get an error if you try require the module from a place that is not accessible from where you are calling it. For example, calling the module from client when its in a server Service. You can now refer to the API . Which will help you get started with Dict Plus!","title":"Getting set up"},{"location":"start/#to-get-started","text":"You have chosen to use Dict Plus. Now what? You must require . Requiring basically enables the module for use. Allowing you to use its methods . First off you must install the module from this page . After you have aquired your .rbxm file you can now use it! Place the .rbxm file in a sutibale service in your game. Recommended services include: * ReplicatedStorage * ServerStorage Essentially you want to place it in a place that is accessible by both client and server for ease of use. When you have the module in your game. You can do this to require / enable it. local DictPlus = require ( game . ServerScriptService . MainModule ) -- Great! You now have access to the module and its methods! Danger You might get an error if you try require the module from a place that is not accessible from where you are calling it. For example, calling the module from client when its in a server Service. You can now refer to the API . Which will help you get started with Dict Plus!","title":"To get started"}]}