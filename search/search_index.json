{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Dict Plus A efficient, non-intrusive module carefully designed to handle dictionaries. Simple to use and simple to learn, easy to adapt. This module is a work in progress. Many problems could occur, in event there are issues you can open an issue on Github. Prerequisites This documentation assumes some familiarity with Lua. If you're new to Lua, use this site . Why Dict Plus? Dict Plus is useful in a variety of situations. The ability to manipulate dictionaries as you like. A multitude of features and functions that are appropriate for your dispersal.","title":"Home"},{"location":"#welcome-to-dict-plus","text":"A efficient, non-intrusive module carefully designed to handle dictionaries. Simple to use and simple to learn, easy to adapt. This module is a work in progress. Many problems could occur, in event there are issues you can open an issue on Github. Prerequisites This documentation assumes some familiarity with Lua. If you're new to Lua, use this site .","title":"Welcome to Dict Plus"},{"location":"#why-dict-plus","text":"Dict Plus is useful in a variety of situations. The ability to manipulate dictionaries as you like. A multitude of features and functions that are appropriate for your dispersal.","title":"Why Dict Plus?"},{"location":"functions/","text":"How to use First Steps First off; you must require the module. In all the examples the module will be refered to DictPlus . You must create a variable for the module by requiring the module. The dictionary we will use will be: local DictPlus = require ( game . ServerStorage . MainModule ) local Dict = { FruitName = \"Lemon\" , FruitColor = \"Yellow\" , Sour = true , } If you see Dict , It is refering to this orginal dictionary. Functions DictPlus.getn() DictPlus.getn(Dict) --> Integer Return(s) #1 Return Integer Will return an Integer . If there are no keys it will return 0. DictPlus.changed() DictPlus.changed(Dict):Connect(function(Key, Value) --> RBXScriptSignal Connection Argument(s) Argument #1: The key that has been changed Argument #2: The new value the key has been changed to Return(s) Will return a RBXScriptSignal which must be connected to; the two arguments when connected to the event is the Key and the NewValue . Caution Not connecting to the event will cause error's make sure to connect to this event. Beta Functions Note These functions are still in BETA, they will not be fully released until they work fully and until is has undergone through testing. Use at your own caution. DictPlus.add() DictPlus.add(d1, d2) --> Dictionary Return(s) Both arguments must be dictionaries. Will return a Dictionary , this Dictionary will be a combination of both keys in the dictionaries, If both Dictionaries have the same Key. One of the key's will be replaced by the other.","title":"How to use"},{"location":"functions/#how-to-use","text":"","title":"How to use"},{"location":"functions/#first-steps","text":"First off; you must require the module. In all the examples the module will be refered to DictPlus . You must create a variable for the module by requiring the module. The dictionary we will use will be: local DictPlus = require ( game . ServerStorage . MainModule ) local Dict = { FruitName = \"Lemon\" , FruitColor = \"Yellow\" , Sour = true , } If you see Dict , It is refering to this orginal dictionary.","title":"First Steps"},{"location":"functions/#functions","text":"","title":"Functions"},{"location":"functions/#dictplusgetn","text":"DictPlus.getn(Dict) --> Integer","title":"DictPlus.getn()"},{"location":"functions/#returns","text":"#1 Return Integer Will return an Integer . If there are no keys it will return 0.","title":"Return(s)"},{"location":"functions/#dictpluschanged","text":"DictPlus.changed(Dict):Connect(function(Key, Value) --> RBXScriptSignal","title":"DictPlus.changed()"},{"location":"functions/#connection-arguments","text":"Argument #1: The key that has been changed Argument #2: The new value the key has been changed to","title":"Connection Argument(s)"},{"location":"functions/#returns_1","text":"Will return a RBXScriptSignal which must be connected to; the two arguments when connected to the event is the Key and the NewValue . Caution Not connecting to the event will cause error's make sure to connect to this event.","title":"Return(s)"},{"location":"functions/#beta-functions","text":"Note These functions are still in BETA, they will not be fully released until they work fully and until is has undergone through testing. Use at your own caution.","title":"Beta Functions"},{"location":"functions/#dictplusadd","text":"DictPlus.add(d1, d2) --> Dictionary","title":"DictPlus.add()"},{"location":"functions/#returns_2","text":"Both arguments must be dictionaries. Will return a Dictionary , this Dictionary will be a combination of both keys in the dictionaries, If both Dictionaries have the same Key. One of the key's will be replaced by the other.","title":"Return(s)"},{"location":"install/","text":"Installation Method 1 Go to the Go to the Github releases page Download the Dict Plus.rbxm file Place the .rbxm file somewhere, for example ReplicatedStorage . For our examples will be putting the module in ServerStorage. Method 2 Click the button below to download the module. Download Module You're now all set!","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#method-1","text":"Go to the Go to the Github releases page Download the Dict Plus.rbxm file Place the .rbxm file somewhere, for example ReplicatedStorage . For our examples will be putting the module in ServerStorage.","title":"Method 1"},{"location":"install/#method-2","text":"Click the button below to download the module. Download Module You're now all set!","title":"Method 2"}]}